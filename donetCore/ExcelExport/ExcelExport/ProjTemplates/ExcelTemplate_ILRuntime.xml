<root>
  <config language="C#">
    <classExtension>.cs</classExtension>
    <classNamePrefix>IL</classNamePrefix>
    <classNameTail>ExcelVO</classNameTail>
    <classStartUpperCase>true</classStartUpperCase>
    <memberStartUpperCase>true</memberStartUpperCase>
  </config>
  <definitionMember>
    <![CDATA[
    /// <summary>$(comment)</summary>
    public $(className) $(member) { get; private set; }
    ]]>
  </definitionMember>
  <decodeMember>
    <![CDATA[
            case "$(member)":
                return (vo, binReader) =>
                {
                    vo.$(member) = $(decode)
                };
        ]]>
  </decodeMember>
  <relationMember>
    <![CDATA[
    [JsonIgnore]
    public $(className) $(member)To$(className)
    {
        get { return $(className).GetVO($(member)); }
    }
    ]]>
  </relationMember>

  <definitionArray>
    <![CDATA[
    /// <summary>$(comment)</summary>
    public ReadOnlyCollection<$(className)> $(member) { get; private set; }
    ]]>
  </definitionArray>
  <decodeArray>
    <![CDATA[
            case "$(member)":
                return (vo, binReader) =>
                {
                    var len_$(member) = binReader.ReadInt32();
                    var arr_$(member) = new $(className)[len_$(member)];
                    for (int i = 0; i < len_$(member); i++)
                    {
                        arr_$(member)[i] = $(decode)
                    }
                    vo.$(member) = new ReadOnlyCollection<$(className)>(arr_$(member));
                };
        ]]>
  </decodeArray>

  <params>
    <param type="enum">
      <decode>
        <![CDATA[
            ($(enumName))ExcelFieldReader.ReadInt(binReader);
            ]]>
      </decode>
    </param>
    <param type="bool" class="bool">
      <decode>
        <![CDATA[
            ExcelFieldReader.ReadBool(binReader);
            ]]>
      </decode>
    </param>
    <param type="int" class="int">
      <decode>
        <![CDATA[
            ExcelFieldReader.ReadInt(binReader);
            ]]>
      </decode>
    </param>
    <param type="float" class="float">
      <decode>
        <![CDATA[
            ExcelFieldReader.ReadFloat(binReader);
            ]]>
      </decode>
    </param>
    <param type="string" class="string">
      <decode>
        <![CDATA[
            ExcelFieldReader.ReadString(binReader);
            ]]>
      </decode>
    </param>
    <param type="date" class="DateTime">
      <decode>
        <![CDATA[
            ExcelFieldReader.ReadDate(binReader);
            ]]>
      </decode>
    </param>
    <param type="vector3" class="Vector3">
      <decode>
        <![CDATA[
            ExcelFieldReader.ReadVector3(binReader);
            ]]>
      </decode>
    </param>
  </params>
  <Class>
    <![CDATA[
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using KLib;
using UnityEngine;

public partial class $(className) : ILBaseExcelVOGeneric<$(primaryKeyType), $(className)>
{
    
    /// <summary>主键的值</summary>
    override public $(primaryKeyType) PrimaryValue { get { return $(primaryKeyName); } }
    
    $(definition)
    
    static private Action<$(className), EndianBinaryReader> RealGetDecodeFunc(string fieldName)
    {
        switch (fieldName)
        {
            $(decode)
            default:
                return null;
        }
    }
    
    static public void Init()
    {
        GetDecodeFunc = RealGetDecodeFunc;
        TableName = "$(tableName)";
        ClassName = "$(className)";
        PrimaryKeyName = "$(primaryKeyName)";
        AutoFillData();
    }
    
}
]]>
  </Class>
  <InitClass fileName="AutoInitILExcelData">
    <![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

public class AutoInitILExcelData
{
    
    static private bool hasFillData;
    static private int restCount;
    static private Action onComplete;

    static public void ItemInitDone()
    {
        restCount--;
        if (restCount == 0)
        {
            onComplete();
        }
        else if (restCount < 0)
        {
            throw new Exception("restCount < 0 !!!");
        }
    }

    static public void Start(Action onCompleteHandler)
    {
        
        if (Application.isPlaying && hasFillData)
        {
            l.LogError("has loaded excelData");
            return;
        }
        
        l.Log("AutoInitILExcelData Start");
        
        onComplete = onCompleteHandler;
        
        hasFillData = true;
        
        restCount = $(initCount);
        
        $(initCode)
        
    }
}
]]>
  </InitClass>
  <InitClassItem>
    <![CDATA[
        $(className).Init();
        ]]>
  </InitClassItem>
</root>